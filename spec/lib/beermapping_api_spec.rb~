require 'rails_helper'
include OwnTestHelper

describe "BeermappingApi" do
  describe "in case of cache miss" do

    before :each do
      Rails.cache.clear
    end

    it "When HTTP GET returns one entry, it is parsed and returned" do
      canned_answer = create_cache_address

      stub_request(:get, /.*tampere/).to_return(body: canned_answer, headers: {'Content-Type' => "text/xml"})

      places = BeermappingApi.places_in("tampere")

      expect(places.size).to eq(1)
      place = places.first
      expect(place.name).to eq("O'Connell's Irish Bar")
      expect(place.street).to eq("Rautatienkatu 24")
    end
  end

  describe "in case of cache hit" do

    it "When one entry in cache, it is returned" do
      canned_answer = create_cache_address

      stub_request(:get, /.*tampere/).to_return(body: canned_answer, headers: {'Content-Type' => "text/xml"})

      # ensure that data found in cache
      BeermappingApi.places_in("tampere")

      places = BeermappingApi.places_in("tampere")

      expect(places.size).to eq(1)
      place = places.first
      expect(place.name).to eq("O'Connell's Irish Bar")
      expect(place.street).to eq("Rautatienkatu 24")
    end

   it "When HTTP GET returns empty entry, the parsed and returned array is empty" do

    canned_answer = <<-END_OF_STRING
<?xml version='1.0' encoding='utf-8' ?><bmp_locations><location><id></id><name></name><status></status><reviewlink></reviewlink><proxylink></proxylink><blogmap></blogmap><street></street><city></city><state></state><zip></zip><country></country><phone></phone><overall></overall><imagecount></imagecount></location></bmp_locations>
    END_OF_STRING

    stub_request(:get, /./).to_return(body: canned_answer, headers: { 'Content-Type' => "text/xml" })

    places = BeermappingApi.places_in("")

    expect(places.size).to eq(0)
   place = places.first
    expect(place).to eq(nil)
  end
   it "When HTTP GET returns many entries, they parsed and returned" do
	adresses =create_addresses #own_test_helper luokasta löytyvä metodi

    stub_request(:get, /.*espoo/).to_return(body: adresses.to_s, headers: { 'Content-Type' => "text/xml" })

   places = BeermappingApi.places_in("espoo")

    expect(places.size).to eq(2)
   place = places.first
    expect(place.name).to eq("Gallows Bird")
	expect(place.street).to eq("Merituulentie 30")
   place2 = places.find_by id(place.id+1)
	expect(place2.name).to eq("O'Connell's Irish Bar")
	expect(place2.street).to eq("Rautatienkatu 24")
  end
 end
end
